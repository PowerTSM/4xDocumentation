<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HAKOM.Versioning.Core.Net</name>
    </assembly>
    <members>
        <member name="T:HAKOM.Versioning.Core.Net.Api.Exceptions.CouldNotParseVersionException">
            <summary>
            Indicates that a <see cref="T:System.String"/> could not be parsed into an <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersion"/> instance.
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Api.Exceptions.CouldNotParseVersionException.VersionString">
            <summary>
            The <see cref="T:System.String"/> that could not be parsed.
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Api.Exceptions.CouldNotParseVersionException.EquivalentHttpStatusCode">
            <summary>
            Indicates that - when thrown while handling an HTTP request, an <see cref="T:System.Net.HttpStatusCode"/> of 500 (Internal Server Error) should be returned with the response.
            </summary>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.Exceptions.CouldNotParseVersionException.#ctor(System.String)">
            <summary>
            Creates a new instance of this exception for the given <paramref name="versionString"/>.
            </summary>
            <param name="versionString">The <see cref="T:System.String"/> that could not be parsed.</param>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.Exceptions.CouldNotParseVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of this exception for the given <paramref name="versionString"/>.
            </summary>
            <param name="versionString">The <see cref="T:System.String"/> that could not be parsed.</param>
            <param name="innerException">Additional information about the reasons why the string could not be parsed.</param>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Api.Exceptions.CouldNotRetrieveVersionFromAssemblyException">
            <summary>
            Indicates that an <see cref="T:System.Reflection.Assembly"/> did not contain any version information that could be retrieved.
            </summary>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.Exceptions.CouldNotRetrieveVersionFromAssemblyException.#ctor(System.Reflection.Assembly,System.Exception)">
            <summary>
            Creates a new instance of this exception for the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> that did not contain any version information.</param>
            <param name="innerException">The reason no version could be retrieved from the assembly.</param>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Api.Exceptions.CouldNotRetrieveVersionFromAssemblyException.EquivalentHttpStatusCode">
            <summary>
            Indicates that - when thrown while handling an HTTP request, an <see cref="T:System.Net.HttpStatusCode"/> of 500 (Internal Server Error) should be returned with the response.
            </summary>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Api.Exceptions.InvalidBuildInformationException">
            <summary>
            Indicates that an attempt to parse a version string into a semantic version has failed because the build information (the part after the '+') did not meet some requirement.
            For a description of the requirements, see https://semver.org/spec/v2.0.0.html#spec-item-10
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Api.Exceptions.InvalidBuildInformationException.EquivalentHttpStatusCode">
            <summary>
            If this error occurs while processing an HTTP request, the request should be terminated with a status code 500 (Internal Server Error).
            </summary>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Api.Exceptions.InvalidPrereleaseInformationException">
            <summary>
            Indicates that an attempt to parse a version string into a semantic version has failed because the pre-release version (the part after the '-') did not meet some requirement.
            For a description of the requirements, see https://semver.org/spec/v2.0.0.html#spec-item-9
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Api.Exceptions.InvalidPrereleaseInformationException.EquivalentHttpStatusCode">
            <summary>
            If this error occurs while processing an HTTP request, the request should be terminated with a status code 500 (Internal Server Error).
            </summary>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Api.Exceptions.MalformedLegacyVersionStringException">
            <summary>
            Indicates that an attempt was made to parse a legacy version string that was not in the correct format.
            </summary>
            <remarks>
            <para>
            The default <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersionFactory"/> implementation supports two different formats of version strings:
            <list type="bullet">
            	<item>Semantic Versioning 2.0</item>
            	<item>Four-part versions loosely based on Microsofts version format.</item>
            </list>
            </para>
            <para>This exception is thrown when an attempt is made to parse a version that does not meet the requirements the latter format.</para>
            <para>When this occurs while reading the version of an assembly (i.e. calling <see cref="M:HAKOM.Versioning.Core.Net.Api.IVersionFactory.Create(System.Reflection.Assembly)"/>, make sure the <see cref="T:System.Reflection.AssemblyVersionAttribute"/> of the assembly has a full four part version number as its value.</para>
            <para>This error can be identified by its code HK18007.</para>
            </remarks>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Api.Exceptions.MalformedLegacyVersionStringException.VersionString">
            <summary>
            The version string that could not be parsed.
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Api.Exceptions.MalformedLegacyVersionStringException.EquivalentHttpStatusCode">
            <summary>
            When this exception occurs during an HTTP request, the service shoul respond with an error and status code 500 (Internal server error), since this is most likely due to some invalid setup of the service and unlikely to be fixed by modifying the request.
            </summary>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Api.Exceptions.MalformedSemanticVersionStringException">
            <summary>
            Indicates that an attempt was made to parse a SemVer version string that was not in the correct format.
            </summary>
            <remarks>
            <para>
            The default <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersionFactory"/> implementation supports two different formats of version strings:
            <list type="bullet">
            	<item>Semantic Versioning 2.0</item>
            	<item>Four-part versions loosely based on Microsofts version format.</item>
            </list>
            </para>
            <para>This exception is thrown when an attempt is made to parse a version that does not meet the requirements the former format.</para>
            <para>When this occurs while reading the version of an assembly (i.e. calling <see cref="M:HAKOM.Versioning.Core.Net.Api.IVersionFactory.Create(System.Reflection.Assembly)"/>, make sure the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> of the assembly has a proper SemVer 2.0 compliant version string as its value.</para>
            <para>This error can be identified by its code HK18008.</para>
            </remarks>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Api.Exceptions.MalformedSemanticVersionStringException.VersionString">
            <summary>
            The version string that could not be parsed.
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Api.Exceptions.MalformedSemanticVersionStringException.EquivalentHttpStatusCode">
            <summary>
            When this exception occurs during an HTTP request, the service shoul respond with an error and status code 500 (Internal server error), since this is most likely due to some invalid setup of the service and unlikely to be fixed by modifying the request.
            </summary>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Api.Extensions.AssemblyExtensions">
            <summary>
            Used to get version information about an assembly
            </summary>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.Extensions.AssemblyExtensions.GetSemanticVersion(System.Reflection.Assembly)">
            <summary>
            Returns the version defined in an <paramref name="assembly"/>. Assumes the assembly is marked with an <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> that contains a string matching the specification described here: https://semver.org/spec/v2.0.0.html
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to get the version for.</param>
            <returns>The version defined in the <paramref name="assembly"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="assembly"/> is null.</exception>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.Extensions.AssemblyExtensions.GetSemanticVersionForAllTypesByNamespace(System.Reflection.Assembly,HAKOM.Versioning.Core.Net.Api.IVersion[]@)">
            <summary>
            <para>
            Returns a <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> that, for each namespace present in the assembly, holds its version. A namespaces version can be either defined by the assembly or by the namespace containing some part resembling the pattern "vX_Y_Z" with X being the major version, Y the minor and Z the patch as described in https://semver.org/spec/v2.0.0.html. 
            </para>
            <para>
            For example, say an assembly has the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> "1.0.0" and exposes a type "SomeNamespace.SomeClass" as well as a type "SomeNamespace.v0_0_5.SomeClass" then this will  return the "SomeNamespace" key with a value of "1.0.0" and the "SomeNamespace.v0_0_5" key with version "0.0.5".
            </para>
            <para>
            In addition, the out parameter <paramref name="distinctVersions"/> will hold all versions defined within the assembly either via <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> or via namespace.
            </para>
            </summary>
            <param name="assembly"></param>
            <param name="distinctVersions"></param>
            <returns></returns>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Api.Extensions.ContainerExtensions">
            <summary>
            Extension methods for adding versioning functionality to an <see cref="T:HAKOM.DependencyInjection.Core.Net.Api.IContainer"/>.
            </summary>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.Extensions.ContainerExtensions.UseVersioning(HAKOM.DependencyInjection.Core.Net.Api.IContainer)">
            <summary>
            Registers a default implementation for <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersionFactory"/> with the <paramref name="container"/>, which handles versions according to https://semver.org/spec/v2.0.0.html
            </summary>
            <param name="container">The <see cref="T:HAKOM.DependencyInjection.Core.Net.Api.IContainer"/> to register semantic versioning with.</param>
            <returns>The <paramref name="container"/> for chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="container"/> is null.</exception>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.Extensions.ContainerExtensions.UseVersionsFromAssemblyAndNamespaces``1(HAKOM.DependencyInjection.Core.Net.Api.IContainer)">
            <summary>
            Registers three singletons with the <paramref name="container"/>:
            <list type="number">
            <item>An instance of <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersion"/> corresponding to the version defined in the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> of the <see cref="T:System.Reflection.Assembly"/> that contains <typeparamref name="TTypeInAssembly"/>.</item>
            <item>An instance of <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> that holds all versions defined in the <see cref="T:System.Reflection.Assembly"/> that contains <typeparamref name="TTypeInAssembly"/>, either by <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> or by a namespace that has the format "vX_Y_Z" with X, Y and Z being the major, minor and patch of a semantic version respectively.</item>
            <item>An instance of <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> that holds all the namespaces contained in the assembly along with its version (which may be defined either by the assemblys <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/> or the namespace itself.</item>
            </list>
            </summary>
            <typeparam name="TTypeInAssembly">A type within the assembly for which to load the version information.</typeparam>
            <param name="container">The container to register the aforementoned singletons with.</param>
            <returns>The <paramref name="container"/> itself for call chaining.</returns>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Api.Extensions.MediaTypeHeaderValueExtensions">
            <summary>
            Provides extension methods for handling version information embedded in media types.
            </summary>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.Extensions.MediaTypeHeaderValueExtensions.TryGetVersion(System.Net.Http.Headers.MediaTypeHeaderValue,HAKOM.Versioning.Core.Net.Api.IVersionFactory,HAKOM.Versioning.Core.Net.Api.IVersion@)">
            <summary>
            Attempts to extract the API version from a media type.
            </summary>
            <param name="mediaType">The media type to extract the version from</param>
            <param name="versionFactory">Required to parse the media type parameter into a <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersion"/>.</param>
            <param name="version">The version as parsed from the media type. May be <see langword="null"/> if there is no version information contained in <paramref name="mediaType"/>.</param>
            <returns><see langword="true"/> if a version has been parsed from the media type, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Api.Extensions.StringExtensions">
            <summary>
            Provides extension methods for parsing <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersion"/> instances from strings.
            </summary>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.Extensions.StringExtensions.TryParseVersionFromNamespace(System.String,HAKOM.Versioning.Core.Net.Api.IVersion,HAKOM.Versioning.Core.Net.Api.IVersionFactory,HAKOM.Versioning.Core.Net.Api.IVersion@)">
            <summary>
            Attempts to parse a version from the given <paramref name="namespace"/>.
            </summary>
            <remarks>
            <para>
            Given a fully qualified namespace, it finds the last ocurrence of a section that is prefixed by a "v" followed by one or more underscore-separated integers and attempts to parse that into a version.
            </para>
            <para>
            For example, the namespace "Company.v4_1.v4_1_3.Namespace" returns the version 4.1.3.
            </para>
            <para>
            This is first done by normalizing the prefixed and underscore-separated namespace part (i.e. v4_1_3) to a period-separated representation without the prefix (i.e. 4.1.3) and than passing that to an implementation of <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersionFactory"/>.
            </para>
            </remarks>
            <param name="namespace">The namespace to parse.</param>
            <param name="default">The default version to return if no version was successfully parsed.</param>
            <param name="versionFactory">An instance of <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersionFactory"/> used to parse the version string once normalized to a period separated version string.</param>
            <param name="parsedOrDefault">Either the parsed version or <paramref name="default"/>.</param>
            <returns><see langword="true"/> if a version was parsed successfully, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Api.IVersion">
            <summary>
            Describes the version of a piece of software.
            </summary>
        </member>
        <member name="F:HAKOM.Versioning.Core.Net.Api.IVersion.PARAMETER_NAME">
            <summary>
            The default name to use for version parameters (i.e. the key in parameter collections).
            </summary>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.IVersion.IsCompatibleWith(HAKOM.Versioning.Core.Net.Api.IVersion)">
            <summary>
            Returns wether or not software with this version should be compatible with
            software having the version given in <paramref name="other"/>.
            </summary>
            <param name="other">The other version to check compatibility with.</param>
            <returns>True if this version is compatible with the <paramref name="other"/>.</returns>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.IVersion.IsPrerelease">
            <summary>
            Wether or not this version should be considered a - possibly unstable - prerelease or not.
            </summary>
            <returns>True if this version is a prerelease and may contain unstable features.</returns>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.IVersion.ToString">
            <summary>
            Produces a string representation of this version instance.
            </summary>
            <remarks>This is the same as calling <see cref="M:HAKOM.Versioning.Core.Net.Api.IVersion.ToString(System.Boolean,System.Boolean)"/> with both parameters set to true.</remarks>
            <returns>The string describing this version.</returns>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.IVersion.ToString(System.Boolean,System.Boolean)">
            <summary>
            Produces a string representation of this version instance. With the parameters the format of the string can be modified.
            </summary>
            <param name="includePrereleaseInformation">Produces a string representation of this version with the prerelease information, if set to true.</param>
            <param name="includeWildcards">Produces a string representation of this version, where wildcards are ignored, if set to false.</param>
            <returns>The string describing this version.</returns>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.IVersion.IsRange">
            <summary>
            Returns wether this version describes one exact version or a range of versions.
            </summary>
            <returns>True if this instance describes a range of versions. False if it describes an exact version.</returns>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Api.IVersionFactory">
            <summary>
            Used to create instances of <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersion"/>.
            </summary>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.IVersionFactory.TryCreate(System.String,HAKOM.Versioning.Core.Net.Api.IVersion@)">
            <summary>
            Attempts to parse the string representation given in <paramref name="versionString"/>.
            </summary>
            <param name="versionString">The version <see cref="T:System.String"/> to parse.</param>
            <param name="version">If parsing is successful, <paramref name="version"/> holds the created <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersion"/> instance. Otherwise null.</param>
            <returns>True if the <see cref="T:System.String"/> was parsed successfully, false otherwise.</returns>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.IVersionFactory.Create(System.String)">
            <summary>
            Creates an <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersion"/> instance from the given <paramref name="versionString"/>.
            </summary>
            <param name="versionString">The version <see cref="T:System.String"/> to create the <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersion"/> from.</param>
            <returns>The created <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersion"/> instance.</returns>
            <exception cref="T:HAKOM.Versioning.Core.Net.Api.Exceptions.CouldNotParseVersionException">Thrown if the <paramref name="versionString"/> could not be parsed successfully.</exception>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.IVersionFactory.TryCreate(System.Reflection.Assembly,HAKOM.Versioning.Core.Net.Api.IVersion@)">
            <summary>
            Attempts to retrieve version information from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to get an <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersion"/> for.</param>
            <param name="version">If successful, <paramref name="version"/> holds the created <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersion"/> that describes the version of the <paramref name="assembly"/>. Otherwise null.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.IVersionFactory.Create(System.Reflection.Assembly)">
            <summary>
            Retrieves version information from the given <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to get version information from.</param>
            <returns>The <see cref="T:HAKOM.Versioning.Core.Net.Api.IVersion"/> that describes the version of the <paramref name="assembly"/>.</returns>
            <exception cref="T:HAKOM.Versioning.Core.Net.Api.Exceptions.CouldNotRetrieveVersionFromAssemblyException">Thrown if <paramref name="assembly"/> does not contain any version information.</exception>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Api.IVersionProvider">
            <summary>
            Provides a list of versions available within an application context
            </summary>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.Api.IVersionProvider.GetVersions">
            <summary>
            Gets all the available versions.
            </summary>
            <returns>A list of all the available versions.</returns>
        </member>
        <member name="T:HAKOM.Versioning.Core.Net.Properties.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Properties.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Properties.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Properties.Strings.CouldNotParseVersionExceptionMessage">
            <summary>
              Looks up a localized string similar to The string &apos;{0}&apos; could not be parsed into a version object..
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Properties.Strings.CouldNotRetrieveVersionFromAssemblyExceptionMessage">
            <summary>
              Looks up a localized string similar to Unable to retrieve version information from the assembly: {0}..
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Properties.Strings.InvalidBuildInformationExceptionMessage">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is invalid build metadata. Refer to https://semver.org/#spec-item-10 for more information..
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Properties.Strings.InvalidPrereleaseInformationExceptionMessage">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid pre-release version. Refer to https://semver.org/#spec-item-9 for more information..
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Properties.Strings.MalformedLegacyVersionStringExceptionMessage">
            <summary>
              Looks up a localized string similar to The provided version string does not meet the required format : &apos;{0}&apos;. A version used by HAKOM software prior to 4.x should be in the format &lt;major&gt;.&lt;minor&gt;.&lt;revision&gt;.&lt;patch&gt;, i.e. 3.10.1.2..
            </summary>
        </member>
        <member name="P:HAKOM.Versioning.Core.Net.Properties.Strings.MalformedSemanticVersionStringExceptionMessage">
            <summary>
              Looks up a localized string similar to The provided version string does not meet requirements set by SemVer 2.0 : &apos;{0}&apos;.
            </summary>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.SemanticVersion.ExtensionRegex">
            <remarks>
            Pattern:<br/>
            <code>^[0-9A-Za-z-]+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-0-9A-Za-z] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.SemanticVersion.ExtensionNumericRegex">
            <remarks>
            Pattern:<br/>
            <code>^\\d+$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.VersionFactory.SemantcVersionRegex">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;major&gt;(\\d+)|\\*){1}(\\.(?&lt;minor&gt;(\\d+)|\\*){1})?(\\.(?&lt;patch&gt;(\\d+)|\\*){1})?(\\-(?&lt;prerelease&gt;.+?))?(\\+(?&lt;build&gt;.+))?$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "major" capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ 1st capture group.<br/>
                        ○ Match a Unicode digit greedily at least once.<br/>
                    ○ Match '*'.<br/>
            ○ Optional (greedy).<br/>
                ○ 2nd capture group.<br/>
                    ○ Match '.'.<br/>
                    ○ "minor" capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ 3rd capture group.<br/>
                                ○ Match a Unicode digit greedily at least once.<br/>
                            ○ Match '*'.<br/>
            ○ Optional (greedy).<br/>
                ○ 4th capture group.<br/>
                    ○ Match '.'.<br/>
                    ○ "patch" capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ 5th capture group.<br/>
                                ○ Match a Unicode digit greedily at least once.<br/>
                            ○ Match '*'.<br/>
            ○ Optional (greedy).<br/>
                ○ 6th capture group.<br/>
                    ○ Match '-'.<br/>
                    ○ "prerelease" capture group.<br/>
                        ○ Match a character other than '\n' lazily at least once.<br/>
            ○ Optional (greedy).<br/>
                ○ 7th capture group.<br/>
                    ○ Match '+'.<br/>
                    ○ "build" capture group.<br/>
                        ○ Match a character other than '\n' greedily at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:HAKOM.Versioning.Core.Net.VersionFactory.LegacyVersionRegex">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;major&gt;(\\d+)){1}(\\.(?&lt;minor&gt;(\\d+)){1})(\\.(?&lt;revision&gt;(\\d+)){1})(\\.(?&lt;patch&gt;(\\d+)){1})$</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "major" capture group.<br/>
                ○ 1st capture group.<br/>
                    ○ Match a Unicode digit atomically at least once.<br/>
            ○ 2nd capture group.<br/>
                ○ Match '.'.<br/>
                ○ "minor" capture group.<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match a Unicode digit atomically at least once.<br/>
            ○ 4th capture group.<br/>
                ○ Match '.'.<br/>
                ○ "revision" capture group.<br/>
                    ○ 5th capture group.<br/>
                        ○ Match a Unicode digit atomically at least once.<br/>
            ○ 6th capture group.<br/>
                ○ Match '.'.<br/>
                ○ "patch" capture group.<br/>
                    ○ 7th capture group.<br/>
                        ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtensionRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ExtensionRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ExtensionRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtensionRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtensionRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtensionNumericRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ExtensionNumericRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ExtensionNumericRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionNumericRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtensionNumericRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionNumericRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ExtensionNumericRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionNumericRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionNumericRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ExtensionNumericRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SemantcVersionRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the SemantcVersionRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.SemantcVersionRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SemantcVersionRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SemantcVersionRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SemantcVersionRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SemantcVersionRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SemantcVersionRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SemantcVersionRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SemantcVersionRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LegacyVersionRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the LegacyVersionRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.LegacyVersionRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LegacyVersionRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LegacyVersionRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LegacyVersionRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.LegacyVersionRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LegacyVersionRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LegacyVersionRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.LegacyVersionRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_20FF03FEFFFF07FEFFFF07">
            <summary>Supports searching for characters in or not in "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
